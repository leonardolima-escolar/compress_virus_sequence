#include <iostream>
#include <string>

// 00 =  A
// 01 = C
// 10 = G
// 11 = T
// Compactar a sequência de um vírus

std::string compactarSequencia(const std::string& sequencia) {
    std::string sequenciaCompactada = "";

    for (char nucleotideo : sequencia) {
        switch (nucleotideo) {
            case 'A': 
                sequenciaCompactada += "00"; 
                break;
            case 'C': 
                sequenciaCompactada += "01"; 
                break;
            case 'G': 
                sequenciaCompactada += "10"; 
                break;
            case 'T': 
                sequenciaCompactada += "11"; 
                break;
            // default:
            //     std::cout << "Nucleotídeo inválido: " << nucleotideo << std::endl;
            //     break;
        }
    }

    return sequenciaCompactada;
}

std::string descompactarSequencia(const std::string& sequenciaCompactada) {
    std::string sequenciaVirus = "";

    for (int i = 0; i < sequenciaCompactada.length(); i += 2) {
        std::string parDeBits = sequenciaCompactada.substr(i, 2);

        if (parDeBits == "00") {
            sequenciaVirus += 'A';
        }
        else if (parDeBits == "01") {
            sequenciaVirus += 'C';
        }
        else if (parDeBits == "10") {
            sequenciaVirus += 'G';
        }
        else if (parDeBits == "11") {
            sequenciaVirus += 'T';
        }
        // else {
        //     std::cout << "Par de bits inválido: " << parDeBits << std::endl;
        //     break;
        // }
    }

    return sequenciaVirus;
}

int main() {
    std::string sequenciaVirus = "ACCGCGCCTTCTTTTCCTGCGAGGGCCCGGTAGGGACCGAGCGCTTTGATTTAAAGCCTGGTTCTGCTTTGTATGATTTATCTAAAGCAGCCCAATCTAAAGAAACCGGTCCCGGGCACTATAAATTGCCTAACAAGTGCGATTCATTCATGGATCCACAGAACGCCCTGTATTATCAGCCGCGGGTACCCACAGCAGCTCCGACATCCGGAGGAGTGCCGTGGAGTCGCGTAGGCGAGGTAGCTATTTTGAGCTTTGTTGCATTGATTTGCTTTTACCTGCTTTACCTTTGGGTGCTGAGAGACCTTATCTTAGTTCTGAAGGCTCGACAAGGCAGATCCACGGAGGAGCTGATATTTGGTGGACAAGCTGTGGATAGGAGCAACCCTATCCCTAATCTACCTTCACCACCAAGTCAGGGCAATCCCGGGCCATTTGTTCCAGGCACGGGATAAGCAATCAGCCATGTCCACGTCCAAGAGGAAGCGGGGAGATGATTCGAATTGGAATAAGCGGGTGCCTAAGAAGAAGCCATCTTCAGCTGGGCTGAAGAGGGCTGGAAGCAAGGCCGATAGGCCATCCCTCCAAATCCAGACACTCCAGCATGCTGGGACCACCATGATAACTGTCCCATCCGGAGGAGTATGTGACCTCATCAACACCTATGCCCGAGGATCTGACGAGGGCAACCGCCACACCAGCGAGACTCTGACGTACAAGATCGCCGTCGACTACCACTTCGTTGCCGACGCGGCTGCCTGCCGCTACTCCAACACCGGAACCGGTGTAATGTGGCTGGTGTATGACACCACTCCCGGCGGACAAGCTCCGACCCCGCAAACTATATTTGCCTACCCTGACACGCTAAAAGCGTGGCCGGCCACATGGAAAGTGAGCCGGGAGCTGTGTCATCGCTTCGTGGTGAAACGGCGATGGTTGTTCAACATGGAGACCGACGGTCGGATTGGTTCGGATATCCCTCCCTCGAATACAAGTTGGAAGCCTTGCAAGCGCAACATCTACTTCCACAAGTTCACGAGTGGGTTGGGAGTGAGAACGCAGTGGAAGAATGTAACGGACGGAGGAGTTGGTGCCATCCAGAGAGGAGCTCTGTACATGGTCATTGCCCCAGGCAATGGCCTTACTTTTACTGCCCATGGGCAGACCCGTCTGTACTTTAAGAGTGTTGGCAACCAGTAATGAATAAAAACTCCCGTTTTATTATATTTGATGAATGCTGAAAGCTTACATTAATATGTCGTGCGATGGCACGAAAAAACACACGCAAACAATACAGGGGGGTAGTCGGCGGGCGGCTAAGGGTGGTGCTCGGCGGGCAGAACATCGAAAAATCAAGATCTATATGAATTACACTTCCTCCGTAGGAGGAAGCACAGGGGGAGAATACCACTTCTCCCCCGGCGACATAATGTAAATGACGCAGTTTGCCTCGAAATACTCCAGCTGCCCTGGAGTCATTTCCTTCATCCAATCTTCATCCGAGTTGGCGAGGATTATTGTAGGCTTAGACTTCTTCTGCACCTTTTTCTTCTTACCATACTTGGGGTTTACAATGAAATCCCTCTGACAGCCAACTAACTGTTTCCAACAAGGACAGAATTTAAACGGAATATCATCTACGATGTTGTAGATTGCGTCTTCGTTGTATGAAGACCAATCAACATTATTTTGCCAGTAATTATGAACCCCTAGGCTTCTGGCCCAAGTAGATTTTCCGGTTCTTGTTGGGCCGACGATGTAGAGGCTCTGCTTTCTTGATCTTTCATCTGATGACTGGATACAGAATCCATCCATTGGAGGTCAGAAATTGCATCCTCGAGGGTATAACAGGTAGGTTGAAGGAGCATGTAAGCTTCGGGACTAACCTGGAAGATGTTAGGCTGGAGCCAATCGTTGATTGACTCATTACAAAGTAAATCAGGTGAGGAGGGTGGATGAGGATTGGTGAACTCTTCCTGAATCTCAGGAAAAAGCTTATTTGCAGAGTATTCAAAATACTGCAATTTTGTGGACCAATCAAAGGGGAGCTCTTTCTGGATCATGGAGAGGTACTCTTCTTTGGAGGTAGCGTGTGAAATAATGTCTCGCATTATTTCATCTTTAGAAGGCTTTTTTTCCTTTACCTCTGAATCAGATTTTCCTAGGAAGGGGGACTTCCTAGGAATGAAAGTACCTCTCTCAAACACAGCCAGAGGTTCCTTGAGAATGTAATCCCTCACTCTGTTAACTGACTTGGCACTCTGAATATTTGGGTGAAACCCATTTATATCAAAGAACCTTGAGTCAGATATCCTTATCGGCTTCTCTGGCTGAAGCAATGCATGTAAATGCAAACTTCCATCTTTATGTGCCTCTCGGGCACATAGAATATATTTGGGAATCCAACGAACGACGAGCTCCCAGATCATCTGACAGGCGATTTCAGGATTTTCTGGACACTTTGGATAGGTTAGGAACGTGTTAGCGTTCCTGTGTGAGAACTGACGGTTGGATGAGGAGGAGGCCATAGCCGACGACGGAGGTTGAGGCTGAGGGATGGCAGACTGGGAGCTCCAAACTCTATAGTATACCCGTGCGCCTTCGAAATCCGCCGCTCCATTGTCTTATAGTGGTTGTAAATGGGCCGGACCGGGCCGGCCCAGCAGGAAAAGAAGGCGCGCACTAATAT";
    // std::string sequenciaVirus = "ACCGCGCCTTCTTTTCCTGCGAGGGCCCGGTAGGGACCGAGCGCTTTGATTTAAAGCCTGGTTCTGCTTTGTATGATTTATCTAAAGCAGCCCAATCTAAAGAAACCGGTCCCGGGCACTATAAATTGCCTAACAAGTGCGATTCATTCATGGATCCACAGAACGCCCTGTATTATCAGCCGCGGGTACCCACAGCAGCTCCGACATCCGGAGGAGTGCCGTGGAGTCGCGTAGGCGAGGTAGCTATTTTGAGCTTTGTTGCATTGATTTGCTTTTACCTGCTTTACCTTTGGGTGCTGAGAGACCTTATCTTAGTTCTGAAGGCTCGACAAGGCAGATCCACGGAGGAGCTGATATTTGGTGGACAAGCTGTGGATAGGAGCAACCCTATCCCTAATCTACCTTCACCACCAAGTCAGGGCAATCCCGGGCCATTTGTTCCAGGCACGGGATAAGCAATCAGCCATGTCCACGTCCAAGAGGAAGCGGGGAGATGATTCGAATTGGAATAAGCGGGTGCCTAAGAAGAAGCCATCTTCAGCTGGGCTGAAGAGGGCTGGAAGCAAGGCCGATAGGCCATCCCTCCAAATCCAGACACTCCAGCATGCTGGGACCACCATGATAACTGTCCCATCCGGAGGAGTATGTGACCTCATCAACACCTATGCCCGAGGATCTGACGAGGGCAACCGCCACACCAGCGAGACTCTGACGTACAAGATCGCCGTCGACTACCACTTCGTTGCCGACGCGGCTGCCTGCCGCTACTCCAACACCGGAACCGGTGTAATGTGGCTGGTGTATGACACCACTCCCGGCGGACAAGCTCCGACCCCGCAAACTATATTTGCCTACCCTGACACGCTAAAAGCGTGGCCGGCCACATGGAAAGTGAGCCGGGAGCTGTGTCATCGCTTCGTGGTGAAACGGCGATGGTTGTTCAACATGGAGACCGACGGTCGGATTGGTTCGGATATCCCTCCCTCGAATACAAGTTGGAAGCCTTGCAAGCGCAACATCTACTTCCACAAGTTCACGAGTGGGTTGGGAGTGAGAACGCAGTGGAAGAATGTAACGGACGGAGGAGTTGGTGCCATCCAGAGAGGAGCTCTGTACATGGTCATTGCCCCAGGCAATGGCCTTACTTTTACTGCCCATGGGCAGACCCGTCTGTACTTTAAGAGTGTTGGCAACCAGTAATGAATAAAAACTCCCGTTTTATTATATTTGATGAATGCTGAAAGCTTACATTAATATGTCGTGCGATGGCACGAAAAAACACACGCAAACAATACAGGGGGGTAGTCGGCGGGCGGCTAAGGGTGGTGCTCGGCGGGCAGAACATCGAAAAATCAAGATCTATATGAATTACACTTCCTCCGTAGGAGGAAGCACAGGGGGAGAATACCACTTCTCCCCCGGCGACATAATGTAAATGACGCAGTTTGCCTCGAAATACTCCAGCTGCCCTGGAGTCATTTCCTTCATCCAATCTTCATCCGAGTTGGCGAGGATTATTGTAGGCTTAGACTTCTTCTGCACCTTTTTCTTCTTACCATACTTGGGGTTTACAATGAAATCCCTCTGACAGCCAACTAACTGTTTCCAACAAGGACAGAATTTAAACGGAATATCATCTACGATGTTGTAGATTGCGTCTTCGTTGTATGAAGACCAATCAACATTATTTTGCCAGTAATTATGAACCCCTAGGCTTCTGGCCCAAGTAGATTTTCCGGTTCTTGTTGGGCCGACGATGTAGAGGCTCTGCTTTCTTGATCTTTCATCTGATGACTGGATACAGAATCCATCCATTGGAGGTCAGAAATTGCATCCTCGAGGGTATAACAGGTAGGTTGAAGGAGCATGTAAGCTTCGGGACTAACCTGGAAGATGTTAGGCTGGAGCCAATCGTTGATTGACTCATTACAAAGTAAATCAGGTGAGGAGGGTGGATGAGGATTGGTGAACTCTTCCTGAATCTCAGGAAAAAGCTTATTTGCAGAGTATTCAAAATACTGCAATTTTGTGGACCAATCAAAGGGGAGCTCTTTCTGGATCATGGAGAGGTACTCTTCTTTGGAGGTAGCGTGTGAAATAATGTCTCGCATTATTTCATCTTTAGAAGGCTTTTTTTCCTTTACCTCTGAATCAGATTTTCCTAGGAAGGGGGACTTCCTAGGAATGAAAGTACCTCTCTCAAACACAGCCAGAGGTTCCTTGAGAATGTAATCCCTCACTCTGTTAACTGACTTGGCACTCTGAATATTTGGGTGAAACCCATTTATATCAAAGAACCTTGAGTCAGATATCCTTATCGGCTTCTCTGGCTGAAGCAATGCATGTAAATGCAAACTTCCATCTTTATGTGCCTCTCGGGCACATAGAATATATTTGGGAATCCAACGAACGACGAGCTCCCAGATCATCTGACAGGCGATTTCAGGATTTTCTGGACACTTTGGATAGGTTAGGAACGTGTTAGCGTTCCTGTGTGAGAACTGACGGTTGGATGAGGAGGAGGCCATAGCCGACGACGGAGGTTGAGGCTGAGGGATGGCAGACTGGGAGCTCCAAACTCTATAGTATACCCGTGCGCCTTCGAAATCCGCCGCTCCATTGTCTTATAGTGGTTGTAAATGGGCCGGACCGGGCCGGCCCAGCAGGAAAAGAAGGCGCGCACTAATAT";

    std::string sequenciaCompactada = compactarSequencia(sequenciaVirus);
    std::cout << "Sequência Compactada: " << sequenciaCompactada << std::endl;

    std::string sequenciaDescompactada = descompactarSequencia(sequenciaCompactada);
    std::cout << "Sequência Descompactada: " << sequenciaDescompactada << std::endl;
    
    int tamanhoBytes = sequenciaCompactada.length() / 8;
    std::cout << "Tamanho em bytes da sequência compactada do vírus: " << tamanhoBytes << " bytes" << std::endl;
    // tamanhoBytes = sequenciaDescompactada.length();
    // std::cout << "Tamanho em bytes da sequência descompactada do vírus: " << tamanhoBytes << " bytes" << std::endl;

    return 0;
}
